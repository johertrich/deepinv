
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/unfolded/demo_vanilla_unfolded.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        New to DeepInverse? Get started with the basics with the
        :ref:`5 minute quickstart tutorial <sphx_glr_auto_examples_basics_demo_quickstart.py>`.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_unfolded_demo_vanilla_unfolded.py:


Vanilla Unfolded algorithm for super-resolution
====================================================================================================

This is a simple example to show how to use vanilla unfolded Plug-and-Play.
The DnCNN denoiser and the algorithm parameters (stepsize, regularization parameters) are trained jointly.
For simplicity, we show how to train the algorithm on a  small dataset. For optimal results, use a larger dataset.

.. GENERATED FROM PYTHON SOURCE LINES 9-20

.. code-block:: Python


    import deepinv as dinv
    import torch
    from torch.utils.data import DataLoader
    from deepinv.optim.data_fidelity import L2
    from deepinv.optim.prior import PnP
    from deepinv.unfolded import unfolded_builder
    from torchvision import transforms
    from deepinv.utils import get_data_home
    from deepinv.datasets import BSDS500








.. GENERATED FROM PYTHON SOURCE LINES 21-24

Setup paths for data loading and results.
----------------------------------------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 24-35

.. code-block:: Python


    BASE_DIR = get_data_home()
    DATA_DIR = BASE_DIR / "measurements"
    RESULTS_DIR = BASE_DIR / "results"
    CKPT_DIR = BASE_DIR / "ckpts"

    # Set the global random seed from pytorch to ensure reproducibility of the example.
    torch.manual_seed(0)

    device = dinv.utils.get_freer_gpu() if torch.cuda.is_available() else "cpu"








.. GENERATED FROM PYTHON SOURCE LINES 36-39

Load base image datasets and degradation operators.
----------------------------------------------------------------------------------------
In this example, we use the CBSD500 dataset for training and the Set3C dataset for testing.

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: Python


    img_size = 64 if torch.cuda.is_available() else 32
    n_channels = 3  # 3 for color images, 1 for gray-scale images
    operation = "super-resolution"








.. GENERATED FROM PYTHON SOURCE LINES 45-48

Generate a dataset of low resolution images and load it.
----------------------------------------------------------------------------------------
We use the Downsampling class from the physics module to generate a dataset of low resolution images.

.. GENERATED FROM PYTHON SOURCE LINES 48-102

.. code-block:: Python


    # For simplicity, we use a small dataset for training.
    # To be replaced for optimal results. For example, you can use the larger DIV2K or LSDIR datasets (also provided in the library).

    # Specify the  train and test transforms to be applied to the input images.
    test_transform = transforms.Compose(
        [transforms.CenterCrop(img_size), transforms.ToTensor()]
    )
    train_transform = transforms.Compose(
        [transforms.RandomCrop(img_size), transforms.ToTensor()]
    )
    # Define the base train and test datasets of clean images.
    train_base_dataset = BSDS500(
        BASE_DIR, download=True, train=True, transform=train_transform
    )
    test_base_dataset = BSDS500(
        BASE_DIR, download=False, train=False, transform=test_transform
    )

    # Use parallel dataloader if using a GPU to speed up training, otherwise, as all computes are on CPU, use synchronous
    # dataloading.
    num_workers = 4 if torch.cuda.is_available() else 0

    # Degradation parameters
    factor = 2
    noise_level_img = 0.03

    # Generate the gaussian blur downsampling operator.
    physics = dinv.physics.Downsampling(
        filter="gaussian",
        img_size=(n_channels, img_size, img_size),
        factor=factor,
        device=device,
        noise_model=dinv.physics.GaussianNoise(sigma=noise_level_img),
    )
    my_dataset_name = "demo_unfolded_sr"
    n_images_max = (
        None if torch.cuda.is_available() else 10
    )  # max number of images used for training (use all if you have a GPU)
    measurement_dir = DATA_DIR / "BSDS500" / operation
    generated_datasets_path = dinv.datasets.generate_dataset(
        train_dataset=train_base_dataset,
        test_dataset=test_base_dataset,
        physics=physics,
        device=device,
        save_dir=measurement_dir,
        train_datapoints=n_images_max,
        num_workers=num_workers,
        dataset_filename=str(my_dataset_name),
    )

    train_dataset = dinv.datasets.HDF5Dataset(path=generated_datasets_path, train=True)
    test_dataset = dinv.datasets.HDF5Dataset(path=generated_datasets_path, train=False)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0it [00:00, ?it/s]    2.50MB [00:00, 26.0MB/s]    5.31MB [00:00, 27.7MB/s]    8.06MB [00:00, 27.8MB/s]    10.8MB [00:00, 27.9MB/s]    13.4MB [00:00, 28.0MB/s]    16.1MB [00:00, 28.0MB/s]    18.8MB [00:00, 27.8MB/s]    21.7MB [00:00, 28.5MB/s]    25.0MB [00:00, 30.2MB/s]    28.2MB [00:01, 31.1MB/s]    31.4MB [00:01, 32.0MB/s]    34.5MB [00:01, 31.2MB/s]    37.9MB [00:01, 32.6MB/s]    41.2MB [00:01, 33.2MB/s]    44.6MB [00:01, 33.8MB/s]    47.9MB [00:01, 34.0MB/s]    51.2MB [00:01, 33.4MB/s]    54.7MB [00:01, 34.2MB/s]    58.0MB [00:02, 28.7MB/s]    60.9MB [00:02, 24.6MB/s]    63.5MB [00:02, 22.5MB/s]    65.8MB [00:02, 21.2MB/s]    67.9MB [00:02, 20.0MB/s]    69.9MB [00:02, 19.5MB/s]    71.9MB [00:02, 18.7MB/s]    73.7MB [00:02, 18.5MB/s]    75.5MB [00:03, 18.5MB/s]    77.3MB [00:03, 18.1MB/s]    79.1MB [00:03, 18.2MB/s]    80.9MB [00:03, 18.2MB/s]    82.6MB [00:03, 18.0MB/s]    84.4MB [00:03, 17.7MB/s]    86.2MB [00:03, 17.8MB/s]    88.0MB [00:03, 17.8MB/s]    89.8MB [00:03, 17.8MB/s]    91.5MB [00:03, 17.9MB/s]    93.2MB [00:04, 17.9MB/s]    95.0MB [00:04, 17.3MB/s]    96.9MB [00:04, 17.9MB/s]    98.6MB [00:04, 17.1MB/s]    101MB [00:04, 17.8MB/s]     102MB [00:04, 17.8MB/s]    104MB [00:04, 17.8MB/s]    106MB [00:04, 17.5MB/s]    108MB [00:04, 17.3MB/s]    109MB [00:05, 17.4MB/s]    111MB [00:05, 17.4MB/s]    113MB [00:05, 17.2MB/s]    115MB [00:05, 17.7MB/s]    116MB [00:05, 18.1MB/s]    118MB [00:05, 17.8MB/s]    120MB [00:05, 18.0MB/s]    122MB [00:05, 17.6MB/s]    123MB [00:05, 17.8MB/s]    125MB [00:05, 17.8MB/s]    127MB [00:06, 17.7MB/s]    129MB [00:06, 17.7MB/s]    130MB [00:06, 18.0MB/s]    132MB [00:06, 18.7MB/s]    134MB [00:06, 9.59MB/s]    143MB [00:07, 18.1MB/s]    153MB [00:07, 28.6MB/s]    156MB [00:07, 16.8MB/s]    158MB [00:08, 13.8MB/s]    160MB [00:08, 20.3MB/s]
    Extracting:   0%|          | 0/2492 [00:00<?, ?it/s]    Extracting:  13%|█▎        | 326/2492 [00:00<00:00, 3252.30it/s]    Extracting:  26%|██▌       | 654/2492 [00:00<00:00, 3266.26it/s]    Extracting:  39%|███▉      | 981/2492 [00:00<00:00, 3248.20it/s]    Extracting:  52%|█████▏    | 1306/2492 [00:00<00:00, 1599.79it/s]    Extracting:  62%|██████▏   | 1539/2492 [00:00<00:00, 1265.25it/s]    Extracting:  69%|██████▉   | 1718/2492 [00:01<00:00, 1218.05it/s]    Extracting: 100%|██████████| 2492/2492 [00:01<00:00, 2103.47it/s]
    Dataset has been saved at datasets/measurements/BSDS500/super-resolution/demo_unfolded_sr0.h5




.. GENERATED FROM PYTHON SOURCE LINES 103-110

Define the unfolded PnP algorithm.
----------------------------------------------------------------------------------------
We use the helper function :func:`deepinv.unfolded.unfolded_builder` to define the Unfolded architecture.
The chosen algorithm is here DRS (Douglas-Rachford Splitting).
Note that if the prior (resp. a parameter) is initialized with a list of length max_iter,
then a distinct model (resp. parameter) is trained for each iteration.
For fixed trained model prior (resp. parameter) across iterations, initialize with a single element.

.. GENERATED FROM PYTHON SOURCE LINES 110-150

.. code-block:: Python


    # Unrolled optimization algorithm parameters
    max_iter = 5  # number of unfolded layers

    # Select the data fidelity term
    data_fidelity = L2()

    # Set up the trainable denoising prior
    # Here the prior model is common for all iterations
    prior = PnP(denoiser=dinv.models.DnCNN(depth=7, pretrained=None).to(device))

    # The parameters are initialized with a list of length max_iter, so that a distinct parameter is trained for each iteration.
    stepsize = [1.0] * max_iter  # stepsize of the algorithm
    sigma_denoiser = [
        1.0
    ] * max_iter  # noise level parameter of the denoiser (not used by DnCNN)
    beta = 1.0  # relaxation parameter of the Douglas-Rachford splitting
    params_algo = {  # wrap all the restoration parameters in a 'params_algo' dictionary
        "stepsize": stepsize,
        "g_param": sigma_denoiser,
        "beta": beta,
    }
    trainable_params = [
        "stepsize",
        "beta",
    ]  # define which parameters from 'params_algo' are trainable

    # Logging parameters
    verbose = True

    # Define the unfolded trainable model.
    model = unfolded_builder(
        iteration="DRS",
        params_algo=params_algo.copy(),
        trainable_params=trainable_params,
        data_fidelity=data_fidelity,
        max_iter=max_iter,
        prior=prior,
    )








.. GENERATED FROM PYTHON SOURCE LINES 151-154

Define the training parameters.
----------------------------------------------------------------------------------------
We use the Adam optimizer and the StepLR scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 154-176

.. code-block:: Python



    # training parameters
    epochs = 5 if torch.cuda.is_available() else 2
    learning_rate = 5e-4
    train_batch_size = 32 if torch.cuda.is_available() else 1
    test_batch_size = 3

    # choose optimizer and scheduler
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-8)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=int(epochs * 0.8))

    # choose supervised training loss
    losses = [dinv.loss.SupLoss(metric=dinv.metric.MSE())]

    train_dataloader = DataLoader(
        train_dataset, batch_size=train_batch_size, num_workers=num_workers, shuffle=True
    )
    test_dataloader = DataLoader(
        test_dataset, batch_size=test_batch_size, num_workers=num_workers, shuffle=False
    )








.. GENERATED FROM PYTHON SOURCE LINES 177-180

Train the network
----------------------------------------------------------------------------------------
We train the network using the :class:`deepinv.Trainer` class.

.. GENERATED FROM PYTHON SOURCE LINES 180-200

.. code-block:: Python


    trainer = dinv.Trainer(
        model,
        physics=physics,
        train_dataloader=train_dataloader,
        eval_dataloader=test_dataloader,
        epochs=epochs,
        scheduler=scheduler,
        losses=losses,
        optimizer=optimizer,
        device=device,
        early_stop=True,  # set to None to disable early stopping
        save_path=str(CKPT_DIR / operation),
        verbose=verbose,
        show_progress_bar=False,  # disable progress bar for better vis in sphinx gallery.
    )

    model = trainer.train()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The model has 188169 trainable parameters
    Train epoch 0: TotalLoss=0.337, PSNR=6.206
    Eval epoch 0: PSNR=9.392
    Best model saved at epoch 1
    Train epoch 1: TotalLoss=0.125, PSNR=10.181
    Eval epoch 1: PSNR=10.399
    Best model saved at epoch 2




.. GENERATED FROM PYTHON SOURCE LINES 201-205

Test the network
--------------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 205-223

.. code-block:: Python

    trainer.test(test_dataloader)

    test_sample, _ = next(iter(test_dataloader))
    model.eval()
    test_sample = test_sample.to(device)

    # Get the measurements and the ground truth
    y = physics(test_sample)
    with torch.no_grad():
        rec = model(y, physics=physics)

    backprojected = physics.A_adjoint(y)

    dinv.utils.plot(
        [backprojected, rec, test_sample],
        titles=["Linear", "Reconstruction", "Ground truth"],
        suptitle="Reconstruction results",
    )



.. image-sg:: /auto_examples/unfolded/images/sphx_glr_demo_vanilla_unfolded_001.png
   :alt: Reconstruction results, Linear, Reconstruction, Ground truth
   :srcset: /auto_examples/unfolded/images/sphx_glr_demo_vanilla_unfolded_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Eval epoch 0: PSNR=10.399, PSNR no learning=9.623
    Test results:
    PSNR no learning: 9.623 +- 3.848
    PSNR: 10.399 +- 3.451
    /home/runner/work/deepinv/deepinv/deepinv/utils/plotting.py:379: UserWarning: This figure was using a layout engine that is incompatible with subplots_adjust and/or tight_layout; not calling subplots_adjust.
      fig.subplots_adjust(top=0.75)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.649 seconds)


.. _sphx_glr_download_auto_examples_unfolded_demo_vanilla_unfolded.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_vanilla_unfolded.ipynb <demo_vanilla_unfolded.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_vanilla_unfolded.py <demo_vanilla_unfolded.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_vanilla_unfolded.zip <demo_vanilla_unfolded.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
